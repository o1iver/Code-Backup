# Makefile.in generated by automake 1.11.1 from Makefile.am.
# libbase/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



#   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010 Free Software
#   Foundation, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA




pkgdatadir = $(datadir)/gnash
pkgincludedir = $(includedir)/gnash
pkglibdir = $(libdir)/gnash
pkglibexecdir = $(libexecdir)/gnash
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
#am__append_1 = $(ANDROID_NDK)/usr/include
#am__append_2 = SharedMemHaiku.cpp
#am__append_3 = SharedMemHaiku.cpp
am__append_4 = SharedMem.cpp
am__append_5 = GnashImagePng.cpp
am__append_6 = GnashImageGif.cpp
#am__append_7 = $(top_builddir)/libbase/libltdlc.la
am__append_8 = $(top_builddir)/libltdl/libltdlc.la
#am__append_9 = $(HAIKU_LIBS)
#am__append_10 = -lws2_32 -lwinmm
am__append_11 = GnashImagePng.h
am__append_12 = GnashImageGif.h
#am__append_13 = \
#	GnashTexture.cpp \
#	$(NULL)

#am__append_14 = \
#	GnashTexture.h \
#	$(NULL)

am__append_15 = \
	GnashVaapiImage.cpp \
	$(NULL)

am__append_16 = \
	GnashVaapiImage.h \
	GnashVaapiImageProxy.h \
	$(NULL)

#am__append_17 = \
#	GnashVaapiTexture.cpp \
#	$(NULL)

#am__append_18 = \
#	GnashVaapiTexture.h \
#	$(NULL)

am__append_19 = \
	-I$(top_srcdir)/libvaapi \
	$(NULL)

am__append_20 = \
	$(top_builddir)/libvaapi/libgnashvaapi.la \
	$(NULL)

am__append_21 = \
	$(top_builddir)/libvaapi/libgnashvaapi.la \
	$(NULL)

#am__append_22 = -no-undefined
#am__append_23 = -lws2_32 -lwinmm
subdir = libbase
DIST_COMMON = $(am__noinst_HEADERS_DIST) $(inst_HEADERS) \
	$(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/macros/agg.m4 \
	$(top_srcdir)/macros/alp.m4 $(top_srcdir)/macros/argz.m4 \
	$(top_srcdir)/macros/boost.m4 $(top_srcdir)/macros/classes.m4 \
	$(top_srcdir)/macros/curl.m4 $(top_srcdir)/macros/dbus.m4 \
	$(top_srcdir)/macros/docbook.m4 $(top_srcdir)/macros/ffmpeg.m4 \
	$(top_srcdir)/macros/firefox.m4 \
	$(top_srcdir)/macros/freetype.m4 \
	$(top_srcdir)/macros/gettext.m4 $(top_srcdir)/macros/gles.m4 \
	$(top_srcdir)/macros/glib.m4 \
	$(top_srcdir)/macros/gnashpkgtool.m4 \
	$(top_srcdir)/macros/gtk2.m4 $(top_srcdir)/macros/gtkglext.m4 \
	$(top_srcdir)/macros/haxe.m4 $(top_srcdir)/macros/hildon.m4 \
	$(top_srcdir)/macros/iconv.m4 $(top_srcdir)/macros/kde3.m4 \
	$(top_srcdir)/macros/kde4.m4 $(top_srcdir)/macros/lib-link.m4 \
	$(top_srcdir)/macros/lib-prefix.m4 \
	$(top_srcdir)/macros/libexe.m4 $(top_srcdir)/macros/libtool.m4 \
	$(top_srcdir)/macros/ltdl.m4 $(top_srcdir)/macros/ltoptions.m4 \
	$(top_srcdir)/macros/ltsugar.m4 \
	$(top_srcdir)/macros/ltversion.m4 \
	$(top_srcdir)/macros/lt~obsolete.m4 \
	$(top_srcdir)/macros/ming.m4 $(top_srcdir)/macros/mtasc.m4 \
	$(top_srcdir)/macros/mysql.m4 $(top_srcdir)/macros/nls.m4 \
	$(top_srcdir)/macros/opengl.m4 $(top_srcdir)/macros/pango.m4 \
	$(top_srcdir)/macros/pkg.m4 $(top_srcdir)/macros/po.m4 \
	$(top_srcdir)/macros/progtest.m4 \
	$(top_srcdir)/macros/pthreads.m4 \
	$(top_srcdir)/macros/python.m4 $(top_srcdir)/macros/qt3.m4 \
	$(top_srcdir)/macros/qt4.m4 $(top_srcdir)/macros/sdl.m4 \
	$(top_srcdir)/macros/swfmill.m4 $(top_srcdir)/macros/x11.m4 \
	$(top_srcdir)/cygnal/acinclude.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/gnashconfig.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(pkglibdir)" "$(DESTDIR)$(sysconfdir)" \
	"$(DESTDIR)$(instdir)"
LTLIBRARIES = $(noinst_LTLIBRARIES) $(pkglib_LTLIBRARIES)
am__DEPENDENCIES_1 =
#am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)
am__DEPENDENCIES_3 =  \
	$(top_builddir)/libvaapi/libgnashvaapi.la
am__libgnashbase_la_SOURCES_DIST = extension.cpp jemalloc.c \
	GnashImage.cpp GnashImageJpeg.cpp GnashFileUtilities.cpp \
	AMF.cpp RTMP.cpp log.cpp memory.cpp rc.cpp sharedlib.cpp \
	string_table.cpp tu_file.cpp IOChannel.cpp Socket.cpp \
	ClockTime.cpp NamingPolicy.cpp WallClockTimer.cpp utf8.cpp \
	curl_adapter.cpp noseek_fd_adapter.cpp zlib_adapter.cpp \
	URL.cpp GC.cpp BitsReader.cpp arg_parser.cpp \
	SharedMemHaiku.cpp SharedMem.cpp GnashImagePng.cpp \
	GnashImageGif.cpp GnashTexture.cpp GnashVaapiImage.cpp \
	GnashVaapiTexture.cpp
am__objects_1 = libgnashbase_la-jemalloc.lo
#am__objects_2 = libgnashbase_la-SharedMemHaiku.lo
#am__objects_3 =  \
#	libgnashbase_la-SharedMemHaiku.lo
am__objects_4 =  \
	libgnashbase_la-SharedMem.lo
am__objects_5 = libgnashbase_la-GnashImagePng.lo
am__objects_6 = libgnashbase_la-GnashImageGif.lo
#am__objects_7 =  \
#	libgnashbase_la-GnashTexture.lo
am__objects_8 = libgnashbase_la-GnashVaapiImage.lo
#am__objects_9 = libgnashbase_la-GnashVaapiTexture.lo
am_libgnashbase_la_OBJECTS = libgnashbase_la-extension.lo \
	$(am__objects_1) libgnashbase_la-GnashImage.lo \
	libgnashbase_la-GnashImageJpeg.lo \
	libgnashbase_la-GnashFileUtilities.lo libgnashbase_la-AMF.lo \
	libgnashbase_la-RTMP.lo libgnashbase_la-log.lo \
	libgnashbase_la-memory.lo libgnashbase_la-rc.lo \
	libgnashbase_la-sharedlib.lo libgnashbase_la-string_table.lo \
	libgnashbase_la-tu_file.lo libgnashbase_la-IOChannel.lo \
	libgnashbase_la-Socket.lo libgnashbase_la-ClockTime.lo \
	libgnashbase_la-NamingPolicy.lo \
	libgnashbase_la-WallClockTimer.lo libgnashbase_la-utf8.lo \
	libgnashbase_la-curl_adapter.lo \
	libgnashbase_la-noseek_fd_adapter.lo \
	libgnashbase_la-zlib_adapter.lo libgnashbase_la-URL.lo \
	libgnashbase_la-GC.lo libgnashbase_la-BitsReader.lo \
	libgnashbase_la-arg_parser.lo $(am__objects_2) \
	$(am__objects_3) $(am__objects_4) $(am__objects_5) \
	$(am__objects_6) $(am__objects_7) $(am__objects_8) \
	$(am__objects_9)
libgnashbase_la_OBJECTS = $(am_libgnashbase_la_OBJECTS)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
libgnashbase_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(AM_CXXFLAGS) $(CXXFLAGS) $(libgnashbase_la_LDFLAGS) \
	$(LDFLAGS) -o $@
libltdlc_la_LIBADD =
am__libltdlc_la_SOURCES_DIST = $(top_srcdir)/libltdl/ltdl.c
#am_libltdlc_la_OBJECTS = libltdlc_la-ltdl.lo
libltdlc_la_OBJECTS = $(am_libltdlc_la_OBJECTS)
#am_libltdlc_la_rpath =
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC    " $@;
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD  " $@;
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX   " $@;
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD " $@;
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN   " $@;
SOURCES = $(libgnashbase_la_SOURCES) $(libltdlc_la_SOURCES)
DIST_SOURCES = $(am__libgnashbase_la_SOURCES_DIST) \
	$(am__libltdlc_la_SOURCES_DIST)
DATA = $(sysconf_DATA)
am__noinst_HEADERS_DIST = GnashImagePng.h GnashImageGif.h \
	GnashTexture.h GnashVaapiImage.h GnashVaapiImageProxy.h \
	GnashVaapiTexture.h
HEADERS = $(inst_HEADERS) $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/ost/code/flash/video/gnash-bzr/src/gnash-build/missing --run aclocal-1.11
AGG_CFLAGS = -I/usr/include/agg2 -I/usr/include/freetype2  
AGG_LIBS = -lagg  
ALP_CFLAGS = 
ALP_LIBS = 
AMTAR = ${SHELL} /home/ost/code/flash/video/gnash-bzr/src/gnash-build/missing --run tar
AM_DEFAULT_VERBOSITY = 0
ANDROID_NDK = 
AR = ar
ARGZ_H = 
AS = as
AS3COMPILE = 
ATK_CFLAGS = -pthread -I/usr/include/atk-1.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
ATK_CONFIG = 
ATK_LIBS = -pthread -latk-1.0 -lgobject-2.0 -lgthread-2.0 -lrt -lglib-2.0  
AUTOCONF = ${SHELL} /home/ost/code/flash/video/gnash-bzr/src/gnash-build/missing --run autoconf
AUTOHEADER = ${SHELL} /home/ost/code/flash/video/gnash-bzr/src/gnash-build/missing --run autoheader
AUTOMAKE = ${SHELL} /home/ost/code/flash/video/gnash-bzr/src/gnash-build/missing --run automake-1.11
AUTOTRACE = 
AWK = gawk
BARTENDER = 
BOOST_CFLAGS = 
BOOST_EXTRA_LIBS =  -lboost_serialization-mt
BOOST_LIBS =  -lboost_thread-mt -lboost_date_time-mt
BUILDDATE = 20110220
CAIRO_CFLAGS = 
CAIRO_CONFIG = 
CAIRO_LIBS = 
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -march=x86-64 -mtune=generic -O2 -pipe          -W     -Wall     -Wcast-align     -Wcast-qual     -Wpointer-arith     -Wreturn-type     -Wmissing-declarations     -Wmissing-prototypes     -Wstrict-prototypes     
CLASSLIST = 
CONFIG_RPATH = config.rpath
CPP = gcc -E
CPPFLAGS = 
CSOUND = 
CURL_CFLAGS = 
CURL_LIBS = -lcurl
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -march=x86-64 -mtune=generic -O2 -pipe          -W     -Wall     -Wcast-align     -Wcast-qual     -Wpointer-arith     -Wreturn-type     -Wnon-virtual-dtor     -Wunused      -fvisibility-inlines-hidden
CYGPATH_W = echo
DB2X_MAN = 
DB2X_MANXML = 
DB2X_PDF = 
DB2X_TEXI = 
DB2X_TEXIXML = 
DB2X_VERSION = 
DB2X_XSLTPROC = 
DBUS_CFLAGS = 
DBUS_LIBS = 
DEFAULT_FLASH_MAJOR_VERSION = 10
DEFAULT_FLASH_MINOR_VERSION = 1
DEFAULT_FLASH_PLATFORM_ID = LNX
DEFAULT_FLASH_REV_NUMBER = 999
DEFAULT_FLASH_SYSTEM_OS = GNU/Linux
DEFAULT_SOL_SAFEDIR = ~/.gnash/SharedObjects
DEFAULT_STREAMS_TIMEOUT = 60
DEFS = -DHAVE_CONFIG_H
DEJAGNU = 
DEJAGNU_CFLAGS = 
DEJAGNU_CONFIG = 
DEPDIR = .deps
DLLTOOL = false
DLOPEN = -dlopen
DLPREOPEN = -dlpreopen
DOXYGEN = /usr/bin/doxygen
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGL_CFLAGS = 
EGL_CONFIG = 
EGL_LIBS = 
EGREP = /bin/grep -E
EXEEXT = 
EXPAT_CFLAGS = 
EXPAT_CONFIG = 
EXPAT_LIBS = -L/usr/lib32 -lexpat 
EXTENSIONS_LIST = 
FAKEFB = 
FC_MATCH = /usr/bin/fc-match
FFMPEG_CFLAGS = -D__STDC_CONSTANT_MACROS -I/usr/include/libavcodec
FFMPEG_LIBS =  -lavcodec   -ldca   -lvorbisenc -lvorbis -lm -logg   -lavformat   -lavutil   -ltheora -logg   -lswscale  
FGREP = /bin/grep -F
FIREFOX_PLUGINS = /usr/lib/mozilla/plugins
FLTK2_CFLAGS = 
FLTK2_CONFIG = 
FLTK2_LIBS = 
FONTCONFIG_CFLAGS =  
FONTCONFIG_CONFIG = 
FONTCONFIG_LIBS = -lfontconfig  
FOP = 
FREETYPE2_CFLAGS = -I/usr/include/freetype2  
FREETYPE2_LIBS = -lfreetype  
GIF_CFLAGS = 
GIF_CONFIG = 
GIF_LIBS = -lgif 
GLES_CFLAGS = 
GLES_LIBS = 
GLEXT_CFLAGS = 
GLEXT_LIBS = 
GLIB_CFLAGS = -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include   -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include   
GLIB_LIBS = -lglib-2.0  
GMSGFMT = /usr/bin/msgfmt
GREP = /bin/grep
GSTPBUTILS_CFLAGS = 
GSTPBUTILS_CONFIG = 
GSTPBUTILS_LIBS = 
GSTREAMER_APP_CFLAGS = 
GSTREAMER_APP_CONFIG = 
GSTREAMER_APP_LIBS = 
GSTREAMER_CFLAGS = 
GSTREAMER_CONFIG = 
GSTREAMER_LIBS = 
GSTREAMER_PLUGINS_BASE_CFLAGS = 
GSTREAMER_PLUGINS_BASE_CONFIG = 
GSTREAMER_PLUGINS_BASE_LIBS = 
GST_INSPECT = 
GTK2_CFLAGS = -pthread -I/usr/include/gtk-2.0 -I/usr/lib/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng14   
GTK2_LIBS = -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lm -lcairo -lpng14 -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0  
HAIKU_LIBS = 
HAXE = 
HAXE_CLASSPATH = 
HILDON_CFLAGS = 
HILDON_LIBS = 
HTTP_TESTSUITE = 
HWACCEL_CONFIG = VAAPI XVideo
INCLTDL = 
INSTALL = /bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_INFO = 
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INTLLIBS = 
INTL_MACOSX_LIBS = 
JAVA = 
JPEG_CFLAGS = 
JPEG_CONFIG = 
JPEG_LIBS = -L/usr/lib32 -ljpeg 
KDE3_APPSDATADIR = 
KDE3_CFLAGS = 
KDE3_CONFIG = 
KDE3_CONFIGDIR = 
KDE3_LIBS = 
KDE3_PLUGINDIR = 
KDE3_SERVICESDIR = 
KDE4_APPSDATADIR = 
KDE4_CFLAGS = 
KDE4_CONFIG = 
KDE4_CONFIGDIR = 
KDE4_LIBS = 
KDE4_PLUGINDIR = 
KDE4_SERVICESDIR = 
KLASH_PLUGIN = 
LC_KEY = 0xcbc384f8
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = -Wl,--hash-style=gnu -Wl,--as-needed -Wl,--as-needed
LIBADD_DL = -ldl 
LIBADD_DLD_LINK = 
LIBADD_DLOPEN = -ldl
LIBADD_SHL_LOAD = 
LIBAVCODEC_IDENT = 52.108.0
LIBEXT = a
LIBICONV = -liconv
LIBINTL = 
LIBLTDL = -lltdl
LIBOBJS = 
LIBPNG_CFLAGS = 
LIBPNG_CONFIG = 
LIBPNG_LIBS = 
LIBPRE = lib
LIBS = -lc -lrt -lX11 -lbz2 -llber -ldl 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBTOOL_DEPS = ./ltmain.sh
LIBVA_CFLAGS =  
LIBVA_CONFIG = 
LIBVA_GLX_CFLAGS = 
LIBVA_GLX_CONFIG = 
LIBVA_GLX_LIBS = 
LIBVA_LIBS = -lva  
LIBVA_X11_CFLAGS =  
LIBVA_X11_CONFIG = 
LIBVA_X11_LIBS = -lva-x11 -lva  
LIPO = 
LN_S = ln -s
LTDLDEPS = 
LTDLINCL = 
LTDLOPEN = libltdl
LTLIBICONV = -liconv
LTLIBINTL = 
LTLIBOBJS = 
LT_CONFIG_H = gnashconfig.h
LT_DLLOADERS =  dlopen.la
LT_DLPREOPEN = -dlpreopen dlopen.la 
MAINT = #
MAKEINFO = ${SHELL} /home/ost/code/flash/video/gnash-bzr/src/gnash-build/missing --run makeinfo
MAKESWF = 
MANIFEST_TOOL = :
MEDIA_CONFIG = ffmpeg 
MING_CFLAGS = 
MING_CONFIG = 
MING_LIBS = 
MING_VERSION = 
MING_VERSION_CODE = 
MKDIR_P = /bin/mkdir -p
MKINSTALLDIRS = $(top_srcdir)/mkinstalldirs
MOC3 = 
MOC4 = 
MSGFMT = /usr/bin/msgfmt
MSGMERGE = /usr/bin/msgmerge
MTASC = 
MTASC_CLASSPATH = 
MYSQL_CFLAGS = 
MYSQL_LIBS = 
NETCAT = 
NM = /usr/bin/nm -B
NMEDIT = 
NSPR_CFLAGS = -I/usr/include/nspr  
NSPR_CONFIG = 
NSPR_LIBS = -lplds4 -lplc4 -lnspr4 -lpthread -ldl  
OBJDUMP = objdump
OBJEXT = o
OPENGL_CFLAGS = 
OPENGL_LIBS = 
OPENVG_CFLAGS = 
OPENVG_CONFIG = 
OPENVG_LIBS = 
OTOOL = 
OTOOL64 = 
PACKAGE = gnash
PACKAGE_BUGREPORT = 
PACKAGE_NAME = gnash
PACKAGE_STRING = gnash trunk
PACKAGE_TARNAME = gnash
PACKAGE_URL = 
PACKAGE_VERSION = trunk
PANGO_CFLAGS = -pthread -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
PANGO_LIBS = -lpangox-1.0 -lX11 -lpango-1.0 -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0  
PATH_SEPARATOR = :
PCH_FLAGS = -include all-includes.h -Winvalid-pch
PDFXMLTEX = 
PERL = /usr/bin/perl
PKG_CONFIG = /usr/bin/pkg-config
PNG_CFLAGS = -I/usr/include/libpng14  
PNG_CONFIG = 
PNG_LIBS = -lpng14  
POSUB = po
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_CXX = g++
PTHREAD_LIBS = -L/usr/lib32 -lpthread
PYGOBJECT_CODEGEN = 
PYGTK_CFLAGS = 
PYGTK_CODEGEN = 
PYGTK_DEFSDIR = 
PYGTK_LIBS = 
PYTHON = 
PYTHON_CFLAGS = 
PYTHON_EXEC_PREFIX = 
PYTHON_LIBS = 
PYTHON_PLATFORM = 
PYTHON_PREFIX = 
PYTHON_VERSION = 
QT3_CFLAGS = 
QT3_LIBS = 
QT4_CFLAGS = 
QT4_LIBS = 
RANLIB = ranlib
RED5_HOST = 
RENDERER_CONFIG =  AGG
RENDERER_LIBS = 
SCROLLINSTALL = 
SCROLLKEEPER = 
SCROLLUPDATE = 
SDL_CFLAGS = -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS =  -lSDL -lpthread
SECURITY_LIST =  localconnection
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
SOLDIR = /tmp
SPEEXDSP_CFLAGS =  
SPEEXDSP_CONFIG = 
SPEEXDSP_LIBS = -lspeexdsp  
SPEEX_CFLAGS =  
SPEEX_CONFIG = 
SPEEX_LIBS = -lspeex  
SSH_CFLAGS = 
SSH_CONFIG = 
SSH_LIBS = 
SSL_CFLAGS = 
SSL_CONFIG = 
SSL_LIBS = 
STATISTICS_LIST =  cache
STRIP = strip
SUPPORTED_GUIS = gtk
SWFC = 
SWFDEC_TESTSUITE = 
SWFMILL = 
SWFMILL_VERSION = 
TS_CFLAGS = 
TS_CONFIG = 
TS_LIBS = 
UIC4 = 
UNGIF_CFLAGS = 
UNGIF_CONFIG = 
UNGIF_LIBS = 
USE_NLS = yes
VERSION = trunk
WGET = /usr/bin/wget
WINDRES = 
X11_CFLAGS = 
X11_LIBS = -L/usr/lib32 -lX11 -lXext -lSM -lICE -lXv
XFT_CFLAGS = 
XFT_CONFIG = 
XFT_LIBS = 
XGETTEXT = /usr/bin/xgettext
XSLTPROC = 
ZIP = 
Z_CFLAGS = 
Z_CONFIG = 
Z_LIBS = -L/usr/lib32 -lz 
abs_builddir = /home/ost/code/flash/video/gnash-bzr/src/gnash-build/libbase
abs_srcdir = /home/ost/code/flash/video/gnash-bzr/src/gnash-build/libbase
abs_top_builddir = /home/ost/code/flash/video/gnash-bzr/src/gnash-build
abs_top_srcdir = /home/ost/code/flash/video/gnash-bzr/src/gnash-build
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
curlconfig = /usr/bin/curl-config
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docbook_styles = 
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/ost/code/flash/video/gnash-bzr/src/gnash-build/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
ltdl_LIBOBJS =  lt__strl.o
ltdl_LTLIBOBJS =  lt__strl.lo
mandir = ${datarootdir}/man
mconfig = 
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = 
pkgpythondir = 
prefix = /usr
program_transform_name = s,x,x,
psdir = ${docdir}
pth_config = 
pthread_config = 
pyexecdir = 
pythonconfig = 
pythondir = 
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sys_symbol_underscore = no
sysconfdir = /etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
AUTOMAKE_OPTIONS = foreign
EXTRA_DIST = gnashrc.in gnashpluginrc.in
sysconf_DATA = gnashrc gnashpluginrc

# this is where Gnash plugins get installed
pluginsdir = $(prefix)/lib/gnash/plugins

# If we are using an installable libltdl, then it needs to be built
# before libgnash, as libgnash depends on it for extensions.
pkglib_LTLIBRARIES = libgnashbase.la
libgnashbase_la_CPPFLAGS = -DPLUGINSDIR=\"$(pluginsdir)\" \
	-DSYSCONFDIR=\"$(sysconfdir)\" -I$(top_srcdir)/libltdl \
	$(PTHREAD_CFLAGS) $(PNG_CFLAGS) $(GIF_CFLAGS) $(GLIB_CFLAGS) \
	$(GSTREAMER_CFLAGS) $(CURL_CFLAGS) $(Z_CFLAGS) $(JPEG_CFLAGS) \
	$(BOOST_CFLAGS) $(INCLTDL) $(NULL) $(am__append_1) \
	$(am__append_19)

# These headers get installed
libgnashbase_la_LIBADD = $(JPEG_LIBS) $(PNG_LIBS) $(GIF_LIBS) \
	$(Z_LIBS) $(CURL_LIBS) $(OPENGL_LIBS) $(LIBINTL) $(BOOST_LIBS) \
	$(PTHREAD_LIBS) $(NULL) $(am__append_7) $(am__append_8) \
	$(am__append_9) $(am__append_10) $(am__append_20) \
	$(am__append_23)
libgnashbase_la_SOURCES = extension.cpp $(MALLOC) GnashImage.cpp \
	GnashImageJpeg.cpp GnashFileUtilities.cpp AMF.cpp RTMP.cpp \
	log.cpp memory.cpp rc.cpp sharedlib.cpp string_table.cpp \
	tu_file.cpp IOChannel.cpp Socket.cpp ClockTime.cpp \
	NamingPolicy.cpp WallClockTimer.cpp utf8.cpp curl_adapter.cpp \
	noseek_fd_adapter.cpp zlib_adapter.cpp URL.cpp GC.cpp \
	BitsReader.cpp arg_parser.cpp $(NULL) $(am__append_2) \
	$(am__append_3) $(am__append_4) $(am__append_5) \
	$(am__append_6) $(am__append_13) $(am__append_15) \
	$(am__append_17)
edit = sed \
	-e 's|@DEFAULT_FLASH_PLATFORM_ID[@]|$(DEFAULT_FLASH_PLATFORM_ID)|g' \
	-e 's|@DEFAULT_FLASH_MAJOR_VERSION[@]|$(DEFAULT_FLASH_MAJOR_VERSION)|g' \
	-e 's|@DEFAULT_FLASH_MINOR_VERSION[@]|$(DEFAULT_FLASH_MINOR_VERSION)|g' \
	-e 's|@DEFAULT_FLASH_REV_NUMBER[@]|$(DEFAULT_FLASH_REV_NUMBER)|g' \
	-e 's|@DEFAULT_STREAMS_TIMEOUT[@]|$(DEFAULT_STREAMS_TIMEOUT)|g' \
	-e 's|@DEFAULT_SOL_SAFEDIR[@]|$(DEFAULT_SOL_SAFEDIR)|g' 

#noinst_LTLIBRARIES = libltdlc.la
#libltdlc_la_CPPFLAGS = $(LTDLINCL) -I$(top_srcdir)/libltdl
#libltdlc_la_SOURCES = $(top_srcdir)/libltdl/ltdl.c
#MALLOC = 

# Maybe use jemalloc, which handles memory fragmentation for
# ECAMscript languages better than the regular system malloc.
# This is controlled by the --enable-jemalloc (disabled by default)
# configure option.
MALLOC = jemalloc.c
noinst_HEADERS = $(am__append_11) $(am__append_12) $(am__append_14) \
	$(am__append_16) $(am__append_18)
inst_HEADERS = $(LIBLTDLHEAD) SimpleBuffer.h extension.h \
	GnashNumeric.h jemtree.h GnashSleep.h gmemory.h ogl.h \
	SharedMem.h sharedlib.h tree.hh tu_file.h IOChannel.h Socket.h \
	tu_opengl_includes.h GnashSystemFDHeaders.h \
	GnashSystemNetHeaders.h GnashSystemIOHeaders.h \
	GnashFileUtilities.h ClockTime.h WallClockTimer.h utf8.h \
	noseek_fd_adapter.h zlib_adapter.h BitsReader.h arg_parser.h \
	getclocktime.hpp GnashAlgorithm.h GnashFactory.h $(NULL) \
	$(EXTENSIONS_API)
EXTENSIONS_API = \
	StringPredicates.h \
	FileTypes.h \
	smart_ptr.h \
	string_table.h \
	ref_counted.h \
	GC.h \
	GnashException.h \
	AMF.h \
	RTMP.h \
	dsodefs.h \
	utility.h \
	log.h \
	rc.h \
	gettext.h \
	URL.h \
	Point2d.h \
	Range2d.h \
	snappingrange.h \
	NetworkAdapter.h \
	NamingPolicy.h \
	GnashImageJpeg.h \
	CachedBitmap.h \
	GnashImage.h \
	$(NULL)

instdir = $(includedir)/gnash
libgnashbase_la_LDFLAGS = -release $(VERSION) $(am__append_22)
libgnashbase_la_DEPENDENCIES = $(LIBLTDLLIB) $(am__append_21)
#AM_CXXFLAGS = $(PCH_FLAGS)
CLEANFILES = libltdl.la libltdlc.la gnashrc gnashpluginrc
all: all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign libbase/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign libbase/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
install-pkglibLTLIBRARIES: $(pkglib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(pkglibdir)" || $(MKDIR_P) "$(DESTDIR)$(pkglibdir)"
	@list='$(pkglib_LTLIBRARIES)'; test -n "$(pkglibdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(pkglibdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(pkglibdir)"; \
	}

uninstall-pkglibLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(pkglib_LTLIBRARIES)'; test -n "$(pkglibdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(pkglibdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(pkglibdir)/$$f"; \
	done

clean-pkglibLTLIBRARIES:
	-test -z "$(pkglib_LTLIBRARIES)" || rm -f $(pkglib_LTLIBRARIES)
	@list='$(pkglib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libgnashbase.la: $(libgnashbase_la_OBJECTS) $(libgnashbase_la_DEPENDENCIES) 
	$(AM_V_CXXLD)$(libgnashbase_la_LINK) -rpath $(pkglibdir) $(libgnashbase_la_OBJECTS) $(libgnashbase_la_LIBADD) $(LIBS)
libltdlc.la: $(libltdlc_la_OBJECTS) $(libltdlc_la_DEPENDENCIES) 
	$(AM_V_CCLD)$(LINK) $(am_libltdlc_la_rpath) $(libltdlc_la_OBJECTS) $(libltdlc_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libgnashbase_la-AMF.Plo
include ./$(DEPDIR)/libgnashbase_la-BitsReader.Plo
include ./$(DEPDIR)/libgnashbase_la-ClockTime.Plo
include ./$(DEPDIR)/libgnashbase_la-GC.Plo
include ./$(DEPDIR)/libgnashbase_la-GnashFileUtilities.Plo
include ./$(DEPDIR)/libgnashbase_la-GnashImage.Plo
include ./$(DEPDIR)/libgnashbase_la-GnashImageGif.Plo
include ./$(DEPDIR)/libgnashbase_la-GnashImageJpeg.Plo
include ./$(DEPDIR)/libgnashbase_la-GnashImagePng.Plo
include ./$(DEPDIR)/libgnashbase_la-GnashTexture.Plo
include ./$(DEPDIR)/libgnashbase_la-GnashVaapiImage.Plo
include ./$(DEPDIR)/libgnashbase_la-GnashVaapiTexture.Plo
include ./$(DEPDIR)/libgnashbase_la-IOChannel.Plo
include ./$(DEPDIR)/libgnashbase_la-NamingPolicy.Plo
include ./$(DEPDIR)/libgnashbase_la-RTMP.Plo
include ./$(DEPDIR)/libgnashbase_la-SharedMem.Plo
include ./$(DEPDIR)/libgnashbase_la-SharedMemHaiku.Plo
include ./$(DEPDIR)/libgnashbase_la-Socket.Plo
include ./$(DEPDIR)/libgnashbase_la-URL.Plo
include ./$(DEPDIR)/libgnashbase_la-WallClockTimer.Plo
include ./$(DEPDIR)/libgnashbase_la-arg_parser.Plo
include ./$(DEPDIR)/libgnashbase_la-curl_adapter.Plo
include ./$(DEPDIR)/libgnashbase_la-extension.Plo
include ./$(DEPDIR)/libgnashbase_la-jemalloc.Plo
include ./$(DEPDIR)/libgnashbase_la-log.Plo
include ./$(DEPDIR)/libgnashbase_la-memory.Plo
include ./$(DEPDIR)/libgnashbase_la-noseek_fd_adapter.Plo
include ./$(DEPDIR)/libgnashbase_la-rc.Plo
include ./$(DEPDIR)/libgnashbase_la-sharedlib.Plo
include ./$(DEPDIR)/libgnashbase_la-string_table.Plo
include ./$(DEPDIR)/libgnashbase_la-tu_file.Plo
include ./$(DEPDIR)/libgnashbase_la-utf8.Plo
include ./$(DEPDIR)/libgnashbase_la-zlib_adapter.Plo
include ./$(DEPDIR)/libltdlc_la-ltdl.Plo

.c.o:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC) \
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC) \
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CC) \
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

libgnashbase_la-jemalloc.lo: jemalloc.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libgnashbase_la-jemalloc.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-jemalloc.Tpo -c -o libgnashbase_la-jemalloc.lo `test -f 'jemalloc.c' || echo '$(srcdir)/'`jemalloc.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-jemalloc.Tpo $(DEPDIR)/libgnashbase_la-jemalloc.Plo
#	$(AM_V_CC) \
#	source='jemalloc.c' object='libgnashbase_la-jemalloc.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgnashbase_la-jemalloc.lo `test -f 'jemalloc.c' || echo '$(srcdir)/'`jemalloc.c

libltdlc_la-ltdl.lo: $(top_srcdir)/libltdl/ltdl.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libltdlc_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libltdlc_la-ltdl.lo -MD -MP -MF $(DEPDIR)/libltdlc_la-ltdl.Tpo -c -o libltdlc_la-ltdl.lo `test -f '$(top_srcdir)/libltdl/ltdl.c' || echo '$(srcdir)/'`$(top_srcdir)/libltdl/ltdl.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/libltdlc_la-ltdl.Tpo $(DEPDIR)/libltdlc_la-ltdl.Plo
#	$(AM_V_CC) \
#	source='$(top_srcdir)/libltdl/ltdl.c' object='libltdlc_la-ltdl.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libltdlc_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libltdlc_la-ltdl.lo `test -f '$(top_srcdir)/libltdl/ltdl.c' || echo '$(srcdir)/'`$(top_srcdir)/libltdl/ltdl.c

.cpp.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX) \
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX) \
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CXX) \
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

libgnashbase_la-extension.lo: extension.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-extension.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-extension.Tpo -c -o libgnashbase_la-extension.lo `test -f 'extension.cpp' || echo '$(srcdir)/'`extension.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-extension.Tpo $(DEPDIR)/libgnashbase_la-extension.Plo
#	$(AM_V_CXX) \
#	source='extension.cpp' object='libgnashbase_la-extension.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-extension.lo `test -f 'extension.cpp' || echo '$(srcdir)/'`extension.cpp

libgnashbase_la-GnashImage.lo: GnashImage.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-GnashImage.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-GnashImage.Tpo -c -o libgnashbase_la-GnashImage.lo `test -f 'GnashImage.cpp' || echo '$(srcdir)/'`GnashImage.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-GnashImage.Tpo $(DEPDIR)/libgnashbase_la-GnashImage.Plo
#	$(AM_V_CXX) \
#	source='GnashImage.cpp' object='libgnashbase_la-GnashImage.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-GnashImage.lo `test -f 'GnashImage.cpp' || echo '$(srcdir)/'`GnashImage.cpp

libgnashbase_la-GnashImageJpeg.lo: GnashImageJpeg.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-GnashImageJpeg.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-GnashImageJpeg.Tpo -c -o libgnashbase_la-GnashImageJpeg.lo `test -f 'GnashImageJpeg.cpp' || echo '$(srcdir)/'`GnashImageJpeg.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-GnashImageJpeg.Tpo $(DEPDIR)/libgnashbase_la-GnashImageJpeg.Plo
#	$(AM_V_CXX) \
#	source='GnashImageJpeg.cpp' object='libgnashbase_la-GnashImageJpeg.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-GnashImageJpeg.lo `test -f 'GnashImageJpeg.cpp' || echo '$(srcdir)/'`GnashImageJpeg.cpp

libgnashbase_la-GnashFileUtilities.lo: GnashFileUtilities.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-GnashFileUtilities.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-GnashFileUtilities.Tpo -c -o libgnashbase_la-GnashFileUtilities.lo `test -f 'GnashFileUtilities.cpp' || echo '$(srcdir)/'`GnashFileUtilities.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-GnashFileUtilities.Tpo $(DEPDIR)/libgnashbase_la-GnashFileUtilities.Plo
#	$(AM_V_CXX) \
#	source='GnashFileUtilities.cpp' object='libgnashbase_la-GnashFileUtilities.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-GnashFileUtilities.lo `test -f 'GnashFileUtilities.cpp' || echo '$(srcdir)/'`GnashFileUtilities.cpp

libgnashbase_la-AMF.lo: AMF.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-AMF.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-AMF.Tpo -c -o libgnashbase_la-AMF.lo `test -f 'AMF.cpp' || echo '$(srcdir)/'`AMF.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-AMF.Tpo $(DEPDIR)/libgnashbase_la-AMF.Plo
#	$(AM_V_CXX) \
#	source='AMF.cpp' object='libgnashbase_la-AMF.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-AMF.lo `test -f 'AMF.cpp' || echo '$(srcdir)/'`AMF.cpp

libgnashbase_la-RTMP.lo: RTMP.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-RTMP.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-RTMP.Tpo -c -o libgnashbase_la-RTMP.lo `test -f 'RTMP.cpp' || echo '$(srcdir)/'`RTMP.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-RTMP.Tpo $(DEPDIR)/libgnashbase_la-RTMP.Plo
#	$(AM_V_CXX) \
#	source='RTMP.cpp' object='libgnashbase_la-RTMP.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-RTMP.lo `test -f 'RTMP.cpp' || echo '$(srcdir)/'`RTMP.cpp

libgnashbase_la-log.lo: log.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-log.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-log.Tpo -c -o libgnashbase_la-log.lo `test -f 'log.cpp' || echo '$(srcdir)/'`log.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-log.Tpo $(DEPDIR)/libgnashbase_la-log.Plo
#	$(AM_V_CXX) \
#	source='log.cpp' object='libgnashbase_la-log.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-log.lo `test -f 'log.cpp' || echo '$(srcdir)/'`log.cpp

libgnashbase_la-memory.lo: memory.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-memory.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-memory.Tpo -c -o libgnashbase_la-memory.lo `test -f 'memory.cpp' || echo '$(srcdir)/'`memory.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-memory.Tpo $(DEPDIR)/libgnashbase_la-memory.Plo
#	$(AM_V_CXX) \
#	source='memory.cpp' object='libgnashbase_la-memory.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-memory.lo `test -f 'memory.cpp' || echo '$(srcdir)/'`memory.cpp

libgnashbase_la-rc.lo: rc.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-rc.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-rc.Tpo -c -o libgnashbase_la-rc.lo `test -f 'rc.cpp' || echo '$(srcdir)/'`rc.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-rc.Tpo $(DEPDIR)/libgnashbase_la-rc.Plo
#	$(AM_V_CXX) \
#	source='rc.cpp' object='libgnashbase_la-rc.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-rc.lo `test -f 'rc.cpp' || echo '$(srcdir)/'`rc.cpp

libgnashbase_la-sharedlib.lo: sharedlib.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-sharedlib.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-sharedlib.Tpo -c -o libgnashbase_la-sharedlib.lo `test -f 'sharedlib.cpp' || echo '$(srcdir)/'`sharedlib.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-sharedlib.Tpo $(DEPDIR)/libgnashbase_la-sharedlib.Plo
#	$(AM_V_CXX) \
#	source='sharedlib.cpp' object='libgnashbase_la-sharedlib.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-sharedlib.lo `test -f 'sharedlib.cpp' || echo '$(srcdir)/'`sharedlib.cpp

libgnashbase_la-string_table.lo: string_table.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-string_table.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-string_table.Tpo -c -o libgnashbase_la-string_table.lo `test -f 'string_table.cpp' || echo '$(srcdir)/'`string_table.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-string_table.Tpo $(DEPDIR)/libgnashbase_la-string_table.Plo
#	$(AM_V_CXX) \
#	source='string_table.cpp' object='libgnashbase_la-string_table.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-string_table.lo `test -f 'string_table.cpp' || echo '$(srcdir)/'`string_table.cpp

libgnashbase_la-tu_file.lo: tu_file.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-tu_file.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-tu_file.Tpo -c -o libgnashbase_la-tu_file.lo `test -f 'tu_file.cpp' || echo '$(srcdir)/'`tu_file.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-tu_file.Tpo $(DEPDIR)/libgnashbase_la-tu_file.Plo
#	$(AM_V_CXX) \
#	source='tu_file.cpp' object='libgnashbase_la-tu_file.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-tu_file.lo `test -f 'tu_file.cpp' || echo '$(srcdir)/'`tu_file.cpp

libgnashbase_la-IOChannel.lo: IOChannel.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-IOChannel.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-IOChannel.Tpo -c -o libgnashbase_la-IOChannel.lo `test -f 'IOChannel.cpp' || echo '$(srcdir)/'`IOChannel.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-IOChannel.Tpo $(DEPDIR)/libgnashbase_la-IOChannel.Plo
#	$(AM_V_CXX) \
#	source='IOChannel.cpp' object='libgnashbase_la-IOChannel.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-IOChannel.lo `test -f 'IOChannel.cpp' || echo '$(srcdir)/'`IOChannel.cpp

libgnashbase_la-Socket.lo: Socket.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-Socket.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-Socket.Tpo -c -o libgnashbase_la-Socket.lo `test -f 'Socket.cpp' || echo '$(srcdir)/'`Socket.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-Socket.Tpo $(DEPDIR)/libgnashbase_la-Socket.Plo
#	$(AM_V_CXX) \
#	source='Socket.cpp' object='libgnashbase_la-Socket.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-Socket.lo `test -f 'Socket.cpp' || echo '$(srcdir)/'`Socket.cpp

libgnashbase_la-ClockTime.lo: ClockTime.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-ClockTime.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-ClockTime.Tpo -c -o libgnashbase_la-ClockTime.lo `test -f 'ClockTime.cpp' || echo '$(srcdir)/'`ClockTime.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-ClockTime.Tpo $(DEPDIR)/libgnashbase_la-ClockTime.Plo
#	$(AM_V_CXX) \
#	source='ClockTime.cpp' object='libgnashbase_la-ClockTime.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-ClockTime.lo `test -f 'ClockTime.cpp' || echo '$(srcdir)/'`ClockTime.cpp

libgnashbase_la-NamingPolicy.lo: NamingPolicy.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-NamingPolicy.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-NamingPolicy.Tpo -c -o libgnashbase_la-NamingPolicy.lo `test -f 'NamingPolicy.cpp' || echo '$(srcdir)/'`NamingPolicy.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-NamingPolicy.Tpo $(DEPDIR)/libgnashbase_la-NamingPolicy.Plo
#	$(AM_V_CXX) \
#	source='NamingPolicy.cpp' object='libgnashbase_la-NamingPolicy.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-NamingPolicy.lo `test -f 'NamingPolicy.cpp' || echo '$(srcdir)/'`NamingPolicy.cpp

libgnashbase_la-WallClockTimer.lo: WallClockTimer.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-WallClockTimer.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-WallClockTimer.Tpo -c -o libgnashbase_la-WallClockTimer.lo `test -f 'WallClockTimer.cpp' || echo '$(srcdir)/'`WallClockTimer.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-WallClockTimer.Tpo $(DEPDIR)/libgnashbase_la-WallClockTimer.Plo
#	$(AM_V_CXX) \
#	source='WallClockTimer.cpp' object='libgnashbase_la-WallClockTimer.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-WallClockTimer.lo `test -f 'WallClockTimer.cpp' || echo '$(srcdir)/'`WallClockTimer.cpp

libgnashbase_la-utf8.lo: utf8.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-utf8.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-utf8.Tpo -c -o libgnashbase_la-utf8.lo `test -f 'utf8.cpp' || echo '$(srcdir)/'`utf8.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-utf8.Tpo $(DEPDIR)/libgnashbase_la-utf8.Plo
#	$(AM_V_CXX) \
#	source='utf8.cpp' object='libgnashbase_la-utf8.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-utf8.lo `test -f 'utf8.cpp' || echo '$(srcdir)/'`utf8.cpp

libgnashbase_la-curl_adapter.lo: curl_adapter.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-curl_adapter.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-curl_adapter.Tpo -c -o libgnashbase_la-curl_adapter.lo `test -f 'curl_adapter.cpp' || echo '$(srcdir)/'`curl_adapter.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-curl_adapter.Tpo $(DEPDIR)/libgnashbase_la-curl_adapter.Plo
#	$(AM_V_CXX) \
#	source='curl_adapter.cpp' object='libgnashbase_la-curl_adapter.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-curl_adapter.lo `test -f 'curl_adapter.cpp' || echo '$(srcdir)/'`curl_adapter.cpp

libgnashbase_la-noseek_fd_adapter.lo: noseek_fd_adapter.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-noseek_fd_adapter.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-noseek_fd_adapter.Tpo -c -o libgnashbase_la-noseek_fd_adapter.lo `test -f 'noseek_fd_adapter.cpp' || echo '$(srcdir)/'`noseek_fd_adapter.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-noseek_fd_adapter.Tpo $(DEPDIR)/libgnashbase_la-noseek_fd_adapter.Plo
#	$(AM_V_CXX) \
#	source='noseek_fd_adapter.cpp' object='libgnashbase_la-noseek_fd_adapter.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-noseek_fd_adapter.lo `test -f 'noseek_fd_adapter.cpp' || echo '$(srcdir)/'`noseek_fd_adapter.cpp

libgnashbase_la-zlib_adapter.lo: zlib_adapter.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-zlib_adapter.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-zlib_adapter.Tpo -c -o libgnashbase_la-zlib_adapter.lo `test -f 'zlib_adapter.cpp' || echo '$(srcdir)/'`zlib_adapter.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-zlib_adapter.Tpo $(DEPDIR)/libgnashbase_la-zlib_adapter.Plo
#	$(AM_V_CXX) \
#	source='zlib_adapter.cpp' object='libgnashbase_la-zlib_adapter.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-zlib_adapter.lo `test -f 'zlib_adapter.cpp' || echo '$(srcdir)/'`zlib_adapter.cpp

libgnashbase_la-URL.lo: URL.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-URL.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-URL.Tpo -c -o libgnashbase_la-URL.lo `test -f 'URL.cpp' || echo '$(srcdir)/'`URL.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-URL.Tpo $(DEPDIR)/libgnashbase_la-URL.Plo
#	$(AM_V_CXX) \
#	source='URL.cpp' object='libgnashbase_la-URL.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-URL.lo `test -f 'URL.cpp' || echo '$(srcdir)/'`URL.cpp

libgnashbase_la-GC.lo: GC.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-GC.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-GC.Tpo -c -o libgnashbase_la-GC.lo `test -f 'GC.cpp' || echo '$(srcdir)/'`GC.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-GC.Tpo $(DEPDIR)/libgnashbase_la-GC.Plo
#	$(AM_V_CXX) \
#	source='GC.cpp' object='libgnashbase_la-GC.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-GC.lo `test -f 'GC.cpp' || echo '$(srcdir)/'`GC.cpp

libgnashbase_la-BitsReader.lo: BitsReader.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-BitsReader.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-BitsReader.Tpo -c -o libgnashbase_la-BitsReader.lo `test -f 'BitsReader.cpp' || echo '$(srcdir)/'`BitsReader.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-BitsReader.Tpo $(DEPDIR)/libgnashbase_la-BitsReader.Plo
#	$(AM_V_CXX) \
#	source='BitsReader.cpp' object='libgnashbase_la-BitsReader.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-BitsReader.lo `test -f 'BitsReader.cpp' || echo '$(srcdir)/'`BitsReader.cpp

libgnashbase_la-arg_parser.lo: arg_parser.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-arg_parser.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-arg_parser.Tpo -c -o libgnashbase_la-arg_parser.lo `test -f 'arg_parser.cpp' || echo '$(srcdir)/'`arg_parser.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-arg_parser.Tpo $(DEPDIR)/libgnashbase_la-arg_parser.Plo
#	$(AM_V_CXX) \
#	source='arg_parser.cpp' object='libgnashbase_la-arg_parser.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-arg_parser.lo `test -f 'arg_parser.cpp' || echo '$(srcdir)/'`arg_parser.cpp

libgnashbase_la-SharedMemHaiku.lo: SharedMemHaiku.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-SharedMemHaiku.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-SharedMemHaiku.Tpo -c -o libgnashbase_la-SharedMemHaiku.lo `test -f 'SharedMemHaiku.cpp' || echo '$(srcdir)/'`SharedMemHaiku.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-SharedMemHaiku.Tpo $(DEPDIR)/libgnashbase_la-SharedMemHaiku.Plo
#	$(AM_V_CXX) \
#	source='SharedMemHaiku.cpp' object='libgnashbase_la-SharedMemHaiku.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-SharedMemHaiku.lo `test -f 'SharedMemHaiku.cpp' || echo '$(srcdir)/'`SharedMemHaiku.cpp

libgnashbase_la-SharedMem.lo: SharedMem.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-SharedMem.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-SharedMem.Tpo -c -o libgnashbase_la-SharedMem.lo `test -f 'SharedMem.cpp' || echo '$(srcdir)/'`SharedMem.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-SharedMem.Tpo $(DEPDIR)/libgnashbase_la-SharedMem.Plo
#	$(AM_V_CXX) \
#	source='SharedMem.cpp' object='libgnashbase_la-SharedMem.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-SharedMem.lo `test -f 'SharedMem.cpp' || echo '$(srcdir)/'`SharedMem.cpp

libgnashbase_la-GnashImagePng.lo: GnashImagePng.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-GnashImagePng.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-GnashImagePng.Tpo -c -o libgnashbase_la-GnashImagePng.lo `test -f 'GnashImagePng.cpp' || echo '$(srcdir)/'`GnashImagePng.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-GnashImagePng.Tpo $(DEPDIR)/libgnashbase_la-GnashImagePng.Plo
#	$(AM_V_CXX) \
#	source='GnashImagePng.cpp' object='libgnashbase_la-GnashImagePng.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-GnashImagePng.lo `test -f 'GnashImagePng.cpp' || echo '$(srcdir)/'`GnashImagePng.cpp

libgnashbase_la-GnashImageGif.lo: GnashImageGif.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-GnashImageGif.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-GnashImageGif.Tpo -c -o libgnashbase_la-GnashImageGif.lo `test -f 'GnashImageGif.cpp' || echo '$(srcdir)/'`GnashImageGif.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-GnashImageGif.Tpo $(DEPDIR)/libgnashbase_la-GnashImageGif.Plo
#	$(AM_V_CXX) \
#	source='GnashImageGif.cpp' object='libgnashbase_la-GnashImageGif.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-GnashImageGif.lo `test -f 'GnashImageGif.cpp' || echo '$(srcdir)/'`GnashImageGif.cpp

libgnashbase_la-GnashTexture.lo: GnashTexture.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-GnashTexture.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-GnashTexture.Tpo -c -o libgnashbase_la-GnashTexture.lo `test -f 'GnashTexture.cpp' || echo '$(srcdir)/'`GnashTexture.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-GnashTexture.Tpo $(DEPDIR)/libgnashbase_la-GnashTexture.Plo
#	$(AM_V_CXX) \
#	source='GnashTexture.cpp' object='libgnashbase_la-GnashTexture.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-GnashTexture.lo `test -f 'GnashTexture.cpp' || echo '$(srcdir)/'`GnashTexture.cpp

libgnashbase_la-GnashVaapiImage.lo: GnashVaapiImage.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-GnashVaapiImage.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-GnashVaapiImage.Tpo -c -o libgnashbase_la-GnashVaapiImage.lo `test -f 'GnashVaapiImage.cpp' || echo '$(srcdir)/'`GnashVaapiImage.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-GnashVaapiImage.Tpo $(DEPDIR)/libgnashbase_la-GnashVaapiImage.Plo
#	$(AM_V_CXX) \
#	source='GnashVaapiImage.cpp' object='libgnashbase_la-GnashVaapiImage.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-GnashVaapiImage.lo `test -f 'GnashVaapiImage.cpp' || echo '$(srcdir)/'`GnashVaapiImage.cpp

libgnashbase_la-GnashVaapiTexture.lo: GnashVaapiTexture.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libgnashbase_la-GnashVaapiTexture.lo -MD -MP -MF $(DEPDIR)/libgnashbase_la-GnashVaapiTexture.Tpo -c -o libgnashbase_la-GnashVaapiTexture.lo `test -f 'GnashVaapiTexture.cpp' || echo '$(srcdir)/'`GnashVaapiTexture.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgnashbase_la-GnashVaapiTexture.Tpo $(DEPDIR)/libgnashbase_la-GnashVaapiTexture.Plo
#	$(AM_V_CXX) \
#	source='GnashVaapiTexture.cpp' object='libgnashbase_la-GnashVaapiTexture.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgnashbase_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libgnashbase_la-GnashVaapiTexture.lo `test -f 'GnashVaapiTexture.cpp' || echo '$(srcdir)/'`GnashVaapiTexture.cpp

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-sysconfDATA: $(sysconf_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(sysconfdir)" || $(MKDIR_P) "$(DESTDIR)$(sysconfdir)"
	@list='$(sysconf_DATA)'; test -n "$(sysconfdir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(sysconfdir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(sysconfdir)" || exit $$?; \
	done

uninstall-sysconfDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(sysconf_DATA)'; test -n "$(sysconfdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(sysconfdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(sysconfdir)" && rm -f $$files
install-instHEADERS: $(inst_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(instdir)" || $(MKDIR_P) "$(DESTDIR)$(instdir)"
	@list='$(inst_HEADERS)'; test -n "$(instdir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(instdir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(instdir)" || exit $$?; \
	done

uninstall-instHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(inst_HEADERS)'; test -n "$(instdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(instdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(instdir)" && rm -f $$files

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(DATA) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(pkglibdir)" "$(DESTDIR)$(sysconfdir)" "$(DESTDIR)$(instdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
	clean-pkglibLTLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-instHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-pkglibLTLIBRARIES install-sysconfDATA

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-instHEADERS uninstall-pkglibLTLIBRARIES \
	uninstall-sysconfDATA

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES clean-pkglibLTLIBRARIES \
	ctags distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-instHEADERS install-man install-pdf \
	install-pdf-am install-pkglibLTLIBRARIES install-ps \
	install-ps-am install-strip install-sysconfDATA installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-instHEADERS \
	uninstall-pkglibLTLIBRARIES uninstall-sysconfDATA


gnashrc: gnashrc.in Makefile
	$(edit) '$(srcdir)/$@.in' >$@

gnashpluginrc: gnashpluginrc.in
	$(edit) '$(srcdir)/$@.in' >$@

# Rebuild with GCC 4.x Mudflap support
mudflap:
	@echo "Rebuilding with GCC Mudflap support"
	$(MAKE) CXXFLAGS="$(CXXFLAGS) -fmudflap" LDFLAGS="$(LDFLAGS) -lmudflap"

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
